{"meta":{"title":"欢迎来到雨中小屋~","subtitle":null,"description":"好少年光芒万丈","author":"Johnny Zhu","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"分类","date":"2021-04-18T10:34:38.000Z","updated":"2021-04-18T10:49:10.108Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2020-12-20T15:14:28.000Z","updated":"2021-04-20T14:45:00.691Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-04-20T06:51:58.201Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[Welcome！] 与&nbsp; 站长Johnny&nbsp; （ ） 正在对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"基础CSS","slug":"CSS基础知识","date":"2021-05-26T10:16:01.000Z","updated":"2021-05-26T15:09:32.597Z","comments":true,"path":"2021/05/26/CSS基础知识/","link":"","permalink":"/2021/05/26/CSS基础知识/","excerpt":"","text":"盒子模型：外边距：margin 顺时针（上、右、下、左）内边距：padding 逆时针（上、左、下、右） 字大小：font-size字体：font-family粗细：font-weight:500;设置行间的距离：line-height引入字体Lobster，艺术字 &lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; font-family: 字体名字, 备用字体名字; 相对单位与绝对单位：相对单位长度，比如 em 和 rem，它们的实际值会依赖其他长度的值而决定。 比如 em 的大小基于元素字体的字体大小。如果使用它来设置 font-size 值，它的值会跟随父元素的 font-size 值来改变。 绝对单位与长度的物理单位相关。 例如，in 和 mm 分别代表着英寸和毫米。 绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，这就可能会造成误差。 样式优先级：所有Html元素都会继承其父元素的Css样式 Class选择器高于继承的样式 ID选择器高于Class选择器 行内样式高于ID选择器 Important优先级最高，在样式中添加 ！Important 例如：color: red !important; Css变量声明一个变量：--penguin-skin: black; 使用变量： background: var(--penguin-skin, gray); 设置备用的值： background: var(--penguin-skin, black); :root 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 html 元素。我们在 :root 里创建变量在全局都可用，即在任何选择器里都生效。 :root { /* 只修改这一行下面的代码 */ --penguin-belly:pink /* 只修改这一行上面的代码 */ } 媒体查询，然后修改变量 @media (max-width: 350px) { :root { /* 只修改这一行下面的代码 */ --penguin-size:200px; --penguin-skin:black; /* 只修改这一行上面的代码 */ } } 文本设计文本对齐方式text-align: justify; 可以让除最后一行之外的文字两端对齐，即每行的左右两端都紧贴行的边缘。 text-align: center; 可以让文本居中对齐。 text-align: right; 可以让文本右对齐。 text-align: left; 是默认值，它可以让文本左对齐。 文本标签 &lt;p&gt;Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at &lt;strong&gt;Stanford University&lt;/strong&gt;. &lt;/p&gt; &lt;p&gt;Google was founded by Larry Page and Sergey Brin while they were &lt;u&gt;Ph.D. students&lt;/u&gt; at &lt;strong&gt;Stanford University&lt;/strong&gt;. &lt;/p&gt; &lt;p&gt;&lt;em&gt;Google was founded by Larry Page and Sergey Brin while they were &lt;u&gt;Ph.D. students&lt;/u&gt; at &lt;strong&gt;Stanford University&lt;/strong&gt;.&lt;/em&gt; &lt;/p&gt; &lt;p&gt;&lt;em&gt;Google was founded by Larry Page and Sergey Brin while they were &lt;u&gt;Ph.D. students&lt;/u&gt; at &lt;strong&gt;Stanford University&lt;/strong&gt;.&lt;/em&gt; &lt;s&gt;Alphabet&lt;/s&gt; &lt;/p&gt; &lt;hr&gt;是水平线标签，自闭合不需要结束标签 box-shadowbox-shadow 属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。 box-shadow 属性的阴影依次由下面这些值描述： offset-x 阴影的水平偏移量；offset-y 阴影的垂直偏移量；blur-radius 模糊半径；spread-radius 阴影扩展半径；color #thumbnail{ 多个阴影 用逗号分隔开 box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23); } 悬停状态：a:hover { color: red; } CSS定位相对位置当元素的定位设置为 relative 时，它允许你通过 CSS 指定该元素在当前文档流页面下的相对偏移量。CSS 里控制各个方向偏移量的属性是 left、right、top 和 bottom。 它们代表从原来位置向远离该方向偏移指定的像素、百分比或者 em。下面的例子展示了段落向上偏移 10px： p { position: relative; bottom: 10px; } **切记这里是相反的，bottom是向上！！！ 把元素的位置设置成相对，并不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响。 绝对位置它的含义是相对于其包含块定位。 和 relative 定位不一样，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它。 这样我们就可以用 CSS 的 top、bottom、left、right 属性来调整元素的位置。绝对定位比较特殊的一点是元素的定位参照于最近的 positioned 祖先元素。 如果它的父元素没有添加定位规则（默认是 position: relative;），浏览器会继续寻找直到默认的 body 标签。 Fixed定位它是一种特殊的绝对（absolute）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 CSS 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。 float属性定位定位机制并不是 position 属性的选项，而是通过元素的 float 属性来设置。 浮动元素不在文档流中，它向 left 或 right 浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 通常需要用 width 属性来指定浮动元素占据的水平空间。 #left { float:left; width: 50%; } margin 属性将元素水平居中在应用设计中经常需要把一个块级元素水平居中显示。 一种常见的实现方式是把块级元素的 margin 值设置为 auto。 同样的，这个方法也对图片奏效。 图片默认是内联元素，但是可以通过设置其 display 属性为 block来把它变成块级元素。 div { background-color: blue; height: 100px; width: 100px; margin:auto; } 颜色设计前面是角度 后面为渐变的颜色 background: linear-gradient(35deg, color 1, color 2, color 3, ...); background: repeating-linear-gradient( 45deg, yellow 0px, yellow 40px, black 40px, black 80px ); 前面为圆盘的颜色 后面为保护度和亮度 header { background-color: hsl(180, 90%, 35%); color: #FFFFFF; } nav { background-color: hsl(180, 80%, 25%); }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"},{"name":"前端","slug":"前端","permalink":"/tags/前端/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"基于AI的疫情智能分析系统（国赛二等奖）","slug":"基于AI的疫情智能分析系统","date":"2020-11-10T14:16:01.000Z","updated":"2021-05-26T14:51:21.580Z","comments":true,"path":"2020/11/10/基于AI的疫情智能分析系统/","link":"","permalink":"/2020/11/10/基于AI的疫情智能分析系统/","excerpt":"","text":"这是我大学做的最大最好的项目了，参加国赛得二等奖，通过这个系统撰写论文，获得安徽省大学生GIS技能大赛论文组三等奖 时空演变、数据查询、人员追踪模块，系统的集成和部署都是我负责，疫情预测和APP是其他三个组员负责。 第一次做比赛组长，真的好辛苦，不过收获很多，获得二等奖真的非常开心（主要是有奖金，嘻嘻 (๑•̀ㅂ•́)و✧）！ 前往作品 作品简介","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"作品","slug":"作品","permalink":"/tags/作品/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"爬虫程序(疫情数据为例)","slug":"Node.js爬虫","date":"2020-03-10T14:16:01.000Z","updated":"2021-05-26T14:55:28.555Z","comments":true,"path":"2020/03/10/Node.js爬虫/","link":"","permalink":"/2020/03/10/Node.js爬虫/","excerpt":"","text":"准备环境安装好Node.js新建一个文件夹新建一个js文件 spider 代码时间首先引入相关模块// 目标是爬取丁香园网站的疫情数据 // 在node端要有一个帮助我请求丁香园网站 const superagent = require(&#39;superagent&#39;) const cheerio = require(&#39;cheerio&#39;) const mysql =require(&#39;mysql&#39;) const path = require(&#39;path&#39;) var schedule = require(&#39;node-schedule&#39;); //schedule模块用来执行定时任务 const request=require(&#39;request&#39;); 创建数据库连接 var connection ; //创建数据库连接 //创建一个函数handleError，负责防止mysql断连 function handleError () { connection = mysql.createConnection({ host:&#39;localhost&#39;, port:端口号,//安装数据库默认端口号为3306 user:&quot;Mysql用户名&quot;, password:&quot;Mysql密码&quot;, database:&quot;你的数据库名称&quot; }); //连接错误，2秒重试 connection.connect(function (err) { if (err) { console.log(&#39;error when connecting to db:&#39;, err); setTimeout(handleError , 2000); } }); connection.on(&#39;error&#39;, function (err) { console.log(&#39;db error&#39;, err); // 如果是连接断开，自动重新连接 if (err.code === &#39;PROTOCOL_CONNECTION_LOST&#39;) { handleError(); } else { throw err; } }); } handleError();//执行函数 获取当前时间//获取当天的时间 var getToday=function(){ var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); if(day&lt;10){ day=&#39;0&#39;+day; } var month=time.getMonth()+1; if(month&lt;10){ month=&#39;0&#39;+month; } var date=year+&#39;-&#39;+month+&#39;-&#39;+day; return date } 第一个执行函数1.这个定时任务是负责获取丁香园的数据，存入数据库中2.先用superagent请求页面获得html3.然后用cheerio解析html，可以通过jQuery的方法操作dom，获得里面的数据4.获得数据之后，就写入数据库的alldata2数据表 var spider=function(){ // 1. 请求目标网站 const url = `https://ncov.dxy.cn/ncovh5/view/pneumonia` superagent .get(url) .then(res =&gt; { // console.log(res.text) // 相应的内容 // 浏览器可以解析html 但是node端不行 // 2. 去解析html字符串从里面提取对应疫情数据 const $ = cheerio.load(res.text) // 然后后我们就可以通过jQuery的方法操作dom // 获取全国疫情信息数据 var $getAreaStat = $(&#39;#getAreaStat&#39;).html() // console.log($getListByCountryTypeService1) // 使用字符切割 正则匹配 eval函数 var dataObj = {} eval($getAreaStat.replace(/window/g, &#39;dataObj&#39;)) //console.log(dataObj) // 3. fs写入数据到本地 var date=getToday(); //////////////////////////////////////////////////////////////////// var getAreaStat=dataObj.getAreaStat; var arr=[] getAreaStat.forEach(item =&gt; { var provinceCode=item.locationId; var result=item.cities; //console.log(result); if(result.length==0){ var addSql = &#39;INSERT INTO alldata2(id,date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead) VALUES(0,?,?,?,?,?,?,?,?,?)&#39;; var cityCode=provinceCode; var province=item.provinceName; var city=province; var confirmed=item.confirmedCount; var suspected=item.suspectedCount; var cured=item.curedCount; var dead=item.deadCount; var addSqlParams = [date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead]; //alldata connection.query(addSql, addSqlParams, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }else{ result.forEach(res=&gt;{ var addSql = &#39;INSERT INTO alldata2(id,date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead) VALUES(0,?,?,?,?,?,?,?,?,?)&#39;; var cityCode=res.locationId var province=item.provinceName; var city=res.cityName; var confirmed=res.confirmedCount; var suspected=res.suspectedCount; var cured=res.curedCount; var dead=res.deadCount; var addSqlParams = [date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead]; //alldata connection.query(addSql, addSqlParams, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }) } }) console.log(&#39;写入数据成功！&#39;) //////////////////////////////////////////////////////////////////// }) .catch(err =&gt; { throw err }) } 第二个执行函数1.读取之前写入alldata2数据表的数据2.请求高德地图的api获取地理坐标3.写入location2数据表 var spider2=function(){ var date=getToday(); var strings=&quot;SELECT * FROM `alldata2` WHERE date=&#39;&quot;+date+&quot;&#39;&quot; connection.query(strings, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; }else{ //console.log(result); const sleep = function (ms){ return new Promise(resolve =&gt; setTimeout(resolve, ms)) } const requestData = async function(){ for(var i=0;i&lt;result.length;i++){ var city=result[i].city; var province=result[i].province; var provinceCode=result[i].provinceCode; var cityCode=result[i].cityCode; var confirmed=result[i].confirmed; var url=&#39;https://restapi.amap.com/v3/geocode/geo?address=&#39;+province+city+&#39;&amp;output=JSON&amp;key=你申请的地址匹配的key&#39; //console.log(url); request(encodeURI(url),function (error, response, body) { var data =JSON.parse(body) var location=data.geocodes[0].location; //console.log(location) var lng=location.split(&#39;,&#39;)[0]; lng=parseFloat(lng) var lat=location.split(&#39;,&#39;)[1]; lat=parseFloat(lat) var addSql2 = &#39;INSERT INTO location2(id,date,province,provinceCode,city,cityCode,confirmed,lng,lat) VALUES(0,?,?,?,?,?,?,?,?)&#39;; var addSqlParams2 = [date,province,provinceCode,city,cityCode,confirmed,lng,lat]; connection.query(addSql2, addSqlParams2, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }) await sleep(200);//每一个循环休息0.2s} } } requestData(); } }); } 为两个执行函数创建定时任务 var runSchedule =function (cb) { // cron风格的配置：每天上午2点05分执行一次第一个函数 schedule.scheduleJob(&#39;0 5 2 * * *&#39;, function () { var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); var month=time.getMonth()+1; console.log(&#39;spider定时任务执行一次&#39;+year+&#39;年&#39;+month+&#39;月&#39;+day+&#39;日&#39;); cb &amp;&amp; cb(); }); } //可以按照cron的格式设置 var runSchedule2 =function (cb) { // cron风格的配置：每天上午2点10分执行一次第二个函数 schedule.scheduleJob(&#39;0 10 2 * * *&#39;, function () { var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); var month=time.getMonth()+1; console.log(&#39;spider2定时任务执行一次&#39;+year+&#39;年&#39;+month+&#39;月&#39;+day+&#39;日&#39;); cb &amp;&amp; cb(); }); } runSchedule(spider); runSchedule2(spider2); console.log(&#39;定时任务已启动&#39;); 全部代码// // 目标是爬取丁香园网站的疫情数据 // 在node端要有一个帮助我请求丁香园网站 const superagent = require(&#39;superagent&#39;) const cheerio = require(&#39;cheerio&#39;) const mysql =require(&#39;mysql&#39;) const path = require(&#39;path&#39;) var schedule = require(&#39;node-schedule&#39;); //schedule模块用来执行定时任务 const request=require(&#39;request&#39;); // superagent.get(url).then() var connection ; //创建数据库连接 function handleError () { connection = mysql.createConnection({ host:&#39;localhost&#39;, port:端口号,//安装数据库默认端口号为3306 user:&quot;Mysql用户名&quot;, password:&quot;Mysql密码&quot;, database:&quot;你的数据库名称&quot; }); //连接错误，2秒重试 connection.connect(function (err) { if (err) { console.log(&#39;error when connecting to db:&#39;, err); setTimeout(handleError , 2000); } }); connection.on(&#39;error&#39;, function (err) { console.log(&#39;db error&#39;, err); // 如果是连接断开，自动重新连接 if (err.code === &#39;PROTOCOL_CONNECTION_LOST&#39;) { handleError(); } else { throw err; } }); } handleError(); //获取当天的时间 var getToday=function(){ var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); if(day&lt;10){ day=&#39;0&#39;+day; } var month=time.getMonth()+1; if(month&lt;10){ month=&#39;0&#39;+month; } var date=year+&#39;-&#39;+month+&#39;-&#39;+day; return date } var spider=function(){ // 1. 请求目标网站 const url = `https://ncov.dxy.cn/ncovh5/view/pneumonia` superagent .get(url) .then(res =&gt; { // console.log(res.text) // 相应的内容 // 浏览器可以解析html 但是node端不行 // 2. 去解析html字符串从里面提取对应疫情数据 const $ = cheerio.load(res.text) // 然后后我们就可以通过jQuery的方法操作dom // 获取全国疫情信息数据 var $getAreaStat = $(&#39;#getAreaStat&#39;).html() // console.log($getListByCountryTypeService1) // 使用字符切割 正则匹配 eval函数 var dataObj = {} eval($getAreaStat.replace(/window/g, &#39;dataObj&#39;)) //console.log(dataObj) // 3. fs写入数据到本地 var date=getToday(); //////////////////////////////////////////////////////////////////// var getAreaStat=dataObj.getAreaStat; var arr=[] getAreaStat.forEach(item =&gt; { var provinceCode=item.locationId; var result=item.cities; //console.log(result); if(result.length==0){ var addSql = &#39;INSERT INTO alldata2(id,date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead) VALUES(0,?,?,?,?,?,?,?,?,?)&#39;; var cityCode=provinceCode; var province=item.provinceName; var city=province; var confirmed=item.confirmedCount; var suspected=item.suspectedCount; var cured=item.curedCount; var dead=item.deadCount; var addSqlParams = [date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead]; //alldata connection.query(addSql, addSqlParams, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }else{ result.forEach(res=&gt;{ var addSql = &#39;INSERT INTO alldata2(id,date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead) VALUES(0,?,?,?,?,?,?,?,?,?)&#39;; var cityCode=res.locationId var province=item.provinceName; var city=res.cityName; var confirmed=res.confirmedCount; var suspected=res.suspectedCount; var cured=res.curedCount; var dead=res.deadCount; var addSqlParams = [date,province,provinceCode,city,cityCode,confirmed,suspected,cured,dead]; //alldata connection.query(addSql, addSqlParams, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }) } }) console.log(&#39;写入数据成功！&#39;) //////////////////////////////////////////////////////////////////// }) .catch(err =&gt; { throw err }) } //spider(); var spider2=function(){ var date=getToday(); var strings=&quot;SELECT * FROM `alldata2` WHERE date=&#39;&quot;+date+&quot;&#39;&quot; connection.query(strings, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; }else{ //console.log(result); const sleep = function (ms){ return new Promise(resolve =&gt; setTimeout(resolve, ms)) } const requestData = async function(){ for(var i=0;i&lt;result.length;i++){ var city=result[i].city; var province=result[i].province; var provinceCode=result[i].provinceCode; var cityCode=result[i].cityCode; var confirmed=result[i].confirmed; var url=&#39;https://restapi.amap.com/v3/geocode/geo?address=&#39;+province+city+&#39;&amp;output=JSON&amp;key=a36e6768d9262fcb339a50ce016a5caa&#39; //console.log(url); request(encodeURI(url),function (error, response, body) { var data =JSON.parse(body) var location=data.geocodes[0].location; //console.log(location) var lng=location.split(&#39;,&#39;)[0]; lng=parseFloat(lng) var lat=location.split(&#39;,&#39;)[1]; lat=parseFloat(lat) var addSql2 = &#39;INSERT INTO location2(id,date,province,provinceCode,city,cityCode,confirmed,lng,lat) VALUES(0,?,?,?,?,?,?,?,?)&#39;; var addSqlParams2 = [date,province,provinceCode,city,cityCode,confirmed,lng,lat]; connection.query(addSql2, addSqlParams2, function (err, result) { if (err) { console.log(&#39;[INSERT ERROR-] - &#39;, err.message); return; } }); }) await sleep(200);//每一个循环休息0.2s} } } requestData(); } }); } //spider2(); // 创建两个定时任务，第一个任务执行spider函数爬取数据存到数据库中 // 第二个定时任务执行spider2函数，将数据库中的爬取数据 读取出来进行处理，添加地理坐标，再次存到数据库中，获得有地理坐标的数据 var runSchedule =function (cb) { // cron风格的配置：每天上午两点05分执行一次 schedule.scheduleJob(&#39;0 5 2 * * *&#39;, function () { var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); var month=time.getMonth()+1; console.log(&#39;spider定时任务执行一次&#39;+year+&#39;年&#39;+month+&#39;月&#39;+day+&#39;日&#39;); cb &amp;&amp; cb(); }); } //可以按照cron的格式设置 var runSchedule2 =function (cb) { // cron风格的配置：每天上午2.10点执行一次 schedule.scheduleJob(&#39;0 10 2 * * *&#39;, function () { var time=new Date(); var year=time.getFullYear(); var day=time.getDate(); var month=time.getMonth()+1; console.log(&#39;spider2定时任务执行一次&#39;+year+&#39;年&#39;+month+&#39;月&#39;+day+&#39;日&#39;); cb &amp;&amp; cb(); }); } runSchedule(spider); runSchedule2(spider2); console.log(&#39;定时任务已启动&#39;); 启动程序在文件夹空白处，按住键盘ctrl键+鼠标右键 打开cmd命令行：输入 cnmp i //安装依赖 也就是开头说的库 node spider //安装完所有依赖，执行程序，不关闭cmd就会一直每天爬取了 数据表格式","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Vue笔记","slug":"Vue笔记","date":"2019-12-12T14:16:01.000Z","updated":"2021-05-26T14:57:58.937Z","comments":true,"path":"2019/12/12/Vue笔记/","link":"","permalink":"/2019/12/12/Vue笔记/","excerpt":"","text":"Vue实战1. Vue 引言 渐进式 JavaScript 框架 –摘自官网 # 渐进式 1. 易用 html css javascript 2. 高效 开发前端页面 非常高效 3. 灵活 开发灵活 多样性 # 总结 Vue 是一个javascript 框架 js 简化页面js操作 bootstrap 是一个css框架 封装css # 后端服务端开发人员: 页面标签 dom jquery js document.getElementById(&quot;xxx&quot;) Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定 ====&gt; 双向绑定 MVVM 注意: 日后在使用Vue过程中页面中不要在引入Jquery框架 html css---&gt;javascript(document.getElementById()...) -----&gt; jquery($(&quot;#xx&quot;)) ----&gt; angularjs -----&gt; Vue(前后端分离架构核心) Vue 前端系统 &lt;---JSON----&gt; 后台系统springcloud 19年 full stack 全栈式开发工程师 # Vue 作者 尤雨溪 国内的 2. Vue入门2.1 下载Vuejs//开发版本: &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; //生产版本: &lt;!-- 生产环境版本，优化了尺寸和速度 --&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt; 2.2 Vue第一个入门应用&lt;div id=&quot;app&quot;&gt; {{ msg }} {{username}} {{pwd}} &lt;br&gt; &lt;span&gt; {{ username }} &lt;h1&gt;{{ msg }}&lt;/h1&gt; &lt;/span&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, //element 用来给Vue实例定义一个作用范围 data:{ //用来给Vue实例定义一些相关数据 msg:&quot;百知欢迎你,期待你的加入!&quot;, username:&quot;hello Vue!&quot;, pwd :&quot;12345&quot;, }, }); &lt;/script&gt; # 总结: 1.vue实例(对象)中el属性: 代表Vue的作用范围 日后在Vue的作用范围内都可以使用Vue的语法 2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过{{变量名}}在Vue作用范围内取出 3.在使用{{}}进行获取data中数据时,可以在{{}}中书写表达式,运算符,调用相关方法,以及逻辑运算等 4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器 注意: el属性值不能指定body或html标签 3. v-text和v-html3.1 v-text v-text:用来获取data中数据将数据以文本的形式渲染到指定标签内部 类似于javascript 中 innerText &lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt; &lt;span &gt;{{ message }}&lt;/span&gt; &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ message:&quot;百知欢迎您&quot; } }) &lt;/script&gt; # 总结 1.{{}}(插值表达式)和v-text获取数据的区别在于 a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据 b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁 3.2 v-html v-html:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部 类似于javascript中 innerHTML &lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt; &lt;span&gt;{{message}}&lt;/span&gt; &lt;br&gt; &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt; &lt;br&gt; &lt;span v-html=&quot;message&quot;&gt;xxxxxx&lt;/span&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ message:&quot;&lt;a href=&#39;&#39;&gt;百知欢迎您&lt;/a&gt;&quot; } }) &lt;/script&gt; 4.vue中事件绑定(v-on)4.1 绑定事件基本语法 &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;{{message}}&lt;/h2&gt; &lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt; &lt;h2&gt;年龄:{{ age }}&lt;/h2&gt; &lt;br&gt; &lt;input type=&quot;button&quot; value=&quot;点我改变年龄&quot; v-on:click=&quot;changeage&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ message:&quot;hello 欢迎来到百知课堂!&quot;, age:23, }, methods:{ //methods 用来定义vue中时间 changeage:function(){ alert(&#39;点击触发&#39;); } } }) &lt;/script&gt; # 总结: 事件 事件源:发生事件dom元素 事件: 发生特定的动作 click.... 监听器 发生特定动作之后的事件处理程序 通常是js中函数 1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如 v-on:click 2.在v-on:事件名的赋值语句中是当前事件触发调用的函数名 3.在vue中事件的函数统一定义在Vue实例的methods属性中 4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据 4.2 Vue中事件的简化语法 &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;{{ age }}&lt;/h2&gt; &lt;input type=&quot;button&quot; value=&quot;通过v-on事件修改年龄每次+1&quot; v-on:click=&quot;changeage&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;通过@绑定时间修改年龄每次-1&quot; @click=&quot;editage&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, //element: 用来指定vue作用范围 data:{ age:23, }, //data : 用来定义vue实例中相关数据 methods:{ changeage:function(){ this.age++; }, editage:function(){ this.age--; } } //methods: 用来定义事件的处理函数 }); &lt;/script&gt; # 总结: 1.日后在vue中绑定事件时可以通过@符号形式 简化 v-on 的事件绑定 4.3 Vue事件函数两种写法 &lt;div id=&quot;app&quot;&gt; &lt;span&gt;{{count}}&lt;/span&gt; &lt;input type=&quot;button&quot; value=&quot;改变count的值&quot; @click=&quot;changecount&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ count:1, }, methods:{ /*changecount:function(){ this.count++; }*/ changecount(){ this.count++; } } }); &lt;/script&gt; # 总结: 1.在Vue中事件定义存在两种写法 一种是 函数名:function(){} 推荐 一种是 函数名(){} 推荐 4.4 Vue事件参数传递 &lt;div id=&quot;app&quot;&gt; &lt;span&gt;{{count}}&lt;/span&gt; &lt;input type=&quot;button&quot; value=&quot;改变count为指定的值&quot; @click=&quot;changecount(23,&#39;xiaohei&#39;)&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ count:1, }, methods:{ //定义changecount changecount(count,name){ this.count = count; alert(name); } } }); &lt;/script&gt; # 总结: 1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数 5.v-show v-if v-bind5.1 v-show v-show:用来控制页面中某个标签元素是否展示 底层使用控制是 display 属性 &lt;div id=&quot;app&quot;&gt; &lt;!-- v-show: 用来控制标签展示还是隐藏的 --&gt; &lt;h2 v-show=&quot;false&quot;&gt;百知教育欢迎你的加入!&lt;/h2&gt; &lt;h2 v-show=&quot;show&quot;&gt;百知教育欢迎你的加入这是vue中定义变量true!&lt;/h2&gt; &lt;input type=&quot;button&quot; value=&quot;展示隐藏标签&quot; @click=&quot;showmsg&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ show:false, }, methods:{ //定义时间 showmsg(){ this.show = !this.show; } } }) &lt;/script&gt; # 总结 1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏 2.在v-show中可以通过boolean表达式控制标签的展示和隐藏 5.2 v-if v-if: 用来控制页面元素是否展示 底层控制是DOM元素 操作DOM &lt;div id=&quot;app&quot;&gt; &lt;h2 v-if=&quot;false&quot;&gt;百知教育&lt;/h2&gt; &lt;h2 v-if=&quot;show&quot;&gt;百知教育欢迎你的加入&lt;/h2&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ show:false }, methods:{ } }); &lt;/script&gt; 5.3 v-bind v-bind: 用来绑定标签的属性从而通过vue动态修改标签的属性 &lt;div id=&quot;app&quot;&gt; &lt;img width=&quot;300&quot; v-bind:title=&quot;msg&quot; v-bind:class=&quot;{aa:showCss}&quot; src=&quot;baizhilogo.jpg&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ msg:&quot;百知教育官方logo!!!!&quot;, showCss:true, }, methods:{ } }) &lt;/script&gt; 5.4 v-bind 简化写法 ​ vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 v-bind:属性名 简化之后 :属性名 &lt;div id=&quot;app&quot;&gt; &lt;img width=&quot;300&quot; :title=&quot;msg&quot; :class=&quot;{aa:showCss}&quot; :src=&quot;src&quot; alt=&quot;&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;动态控制加入样式&quot; @click=&quot;addCss&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;改变图片&quot; @click=&quot;changeSrc&quot;&gt; &lt;/div&gt; &lt;!--引入vue.js--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el:&quot;#app&quot;, data:{ msg:&quot;百知教育官方logo!!!!&quot;, showCss:true, src:&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1583490365568&amp;di=52a82bd614cd4030f97ada9441bb2d0e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg&quot; }, methods:{ addCss(){ this.showCss= !this.showCss; }, changeSrc(){ this.src = &quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&amp;fm=26&amp;gp=0.jpg&quot;; } } }) &lt;/script&gt; 6.v-for的使用 v-for: 作用就是用来对对象进行遍历的(数组也是对象的一种) &lt;div id=&quot;app&quot;&gt; &lt;span&gt;{{ user.name }} {{ user.age }}&lt;/span&gt; &lt;br&gt; &lt;!-- 通过v-for遍历对象 --&gt; &lt;span v-for=&quot;(value,key,index) in user&quot;&gt; {{index}} : {{key}} : {{value}} &lt;/span&gt; &lt;!-- 通过v-for遍历数组 --&gt; &lt;ul&gt; &lt;li v-for=&quot;a,index in arr&quot; &gt; {{index}} {{a}} &lt;/li&gt; &lt;/ul&gt; &lt;!-- 通过v-for遍历数组中对象 :key 便于vue内部做重用和排序 --&gt; &lt;ul&gt; &lt;li v-for=&quot;user,index in users&quot; :key=&quot;user.id&quot;&gt; {{index+1}} {{ user.name }} === {{ user.age }} ==== {{ user.content }} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--引入vue--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: &quot;#app&quot;, data: { user:{name:&quot;小陈&quot;,age:23}, arr:[&quot;北京校区&quot;, &quot;天津校区&quot;, &quot;河南校区&quot;], users:[ {id:&quot;1&quot;,name:&quot;xiaochen&quot;,age:23,content:&quot;我曾经也是一个单纯的少年!&quot;}, {id:&quot;2&quot;,name:&quot;小白&quot;,age:23,content:&quot;我曾经是一个邪恶的少年!&quot;}, ] }, methods: {} }); &lt;/script&gt; # 总结 1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key 7 .v-model 双向绑定 v-model: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制 &lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt; &lt;span&gt;{{message}}&lt;/span&gt; &lt;hr&gt; &lt;input type=&quot;button&quot; value=&quot;改变Data中值&quot; @click=&quot;changeValue&quot;&gt; &lt;/div&gt; &lt;!--引入vue--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: &quot;#app&quot;, data: { message:&quot;&quot; }, methods: { changeValue(){ this.message=&#39;百知教育!&#39;; } } }); &lt;/script&gt; # 总结 1.使用v-model指令可以实现数据的双向绑定 2.所谓双向绑定 表单中数据变化导致vue实例data数据变化 vue实例中data数据的变化导致表单中数据变化 称之为双向绑定 # MVVM架构 双向绑定机制 Model: 数据 Vue实例中绑定数据 VM: ViewModel 监听器 View: 页面 页面展示的数据 8. 事件修饰符 修饰符: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制 # 1.常用的事件修饰符 .stop 停止 .prevent 阻止 .self 独自 .once 一次 8.1 stop事件修饰符 用来阻止事件冒泡 &lt;div id=&quot;app&quot;&gt; &lt;div class=&quot;aa&quot; @click=&quot;divClick&quot;&gt; &lt;!--用来阻止事件冒泡--&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click.stop=&quot;btnClick&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--引入vue--&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: &quot;#app&quot;, data: {}, methods: { btnClick(){ alert(&#39;button被点击了&#39;); }, divClick(){ alert(&#39;div被点击了&#39;); } } }); &lt;/script&gt; 8.2 prevent 事件修饰符 用来阻止标签的默认行为 &lt;!--用来阻止事件的默认行为--&gt; &lt;a href=&quot;http://www.baizhibest.com/&quot; @click.prevent=&quot;aClick&quot;&gt;百知教育&lt;/a&gt; 8.3 self 事件修饰符 用来针对于当前标签的事件触发 ===========&gt; 只触发自己标签的上特定动作的事件 只关心自己标签上触发的事件 不监听事件冒泡 &lt;!--只触发标签自身的事件--&gt; &lt;div class=&quot;aa&quot; @click.self=&quot;divClick&quot;&gt; &lt;!--用来阻止事件冒泡--&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click.stop=&quot;btnClick&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;按钮1&quot; @click=&quot;btnClick1&quot;&gt; &lt;/div&gt; 8.4 once 事件修饰符 once 一次作用: 就是让指定事件只触发一次 &lt;!-- .prevent : 用来阻止事件的默认行为 .once : 用来只执行一次特定的事件 --&gt; &lt;a href=&quot;http://www.baizhibest.com/&quot; @click.prevent.once=&quot;aClick&quot;&gt;百知教育&lt;/a&gt; 9. 按键修饰符 作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符 # 按键修饰符 .enter .tab .delete (捕获“删除”和“退格”键) .esc .space .up .down .left .right 9.1 enter 回车键 用来在触发回车按键之后触发的事件 &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.enter=&quot;keyups&quot;&gt; 9.2 tab 键 用来捕获到tab键执行到当前标签是才会触发 &lt;input type=&quot;text&quot; @keyup.tab=&quot;keytabs&quot;&gt; 10. Axios 基本使用10.1 引言 Axios 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染 页面局部更新技术 Ajax 10.2 Axios 第一个程序中文网站:https://www.kancloud.cn/yunye/axios/234845 安装: https://unpkg.com/axios/dist/axios.min.js 10.2.1 GET方式的请求 //发送GET方式请求 axios.get(&quot;http://localhost:8989/user/findAll?name=xiaochen&quot;).then(function(response){ console.log(response.data); }).catch(function(err){ console.log(err); }); 10.2.2 POST方式请求 //发送POST方式请求 axios.post(&quot;http://localhost:8989/user/save&quot;,{ username:&quot;xiaochen&quot;, age:23, email:&quot;xiaochen@zparkhr.com&quot;, phone:13260426185 }).then(function(response){ console.log(response.data); }).catch(function(err){ console.log(err); }); 10.2.3 axios并发请求 并发请求: 将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果 //1.c );//用来发送一组并发请求 11. Vue 生命周期 Vue 实例生命周期 ===&gt; java 对象生命周期(初始化阶段 运行阶段 销毁阶段) 生命周期钩子 ====&gt; 生命周期函数 Vue实例从创建到销毁过程中自动触发一些列函数 ====&gt; Vue生命周期函数(钩子) # Vue生命周期总结 - 1.初始化阶段 beforeCreate(){ //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性 console.log(&quot;beforeCreate: &quot;+this.msg); }, created(){ //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法 console.log(&quot;created: &quot;+this.msg); }, beforeMount(){//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译 console.log(&quot;beforeMount: &quot;+document.getElementById(&quot;sp&quot;).innerText); }, mounted(){//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面 console.log(&quot;Mounted: &quot;+document.getElementById(&quot;sp&quot;).innerText); } - 2.运行阶段 beforeUpdate(){//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据 console.log(&quot;beforeUpdate:&quot;+this.msg); console.log(&quot;beforeUpdate:&quot;+document.getElementById(&quot;sp&quot;).innerText); }, updated(){ //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化 页面中数据已经和data中数据一致 console.log(&quot;updated:&quot;+this.msg); console.log(&quot;updated:&quot;+document.getElementById(&quot;sp&quot;).innerText); }, - 3.销毁阶段 beforeDestory(){//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁 }, destoryed(){ //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁 } 12. Vue中组件(component)12.1 组件作用组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不同业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。 12.2 组件使用12.2.1 全局组件注册 说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件 //1.开发全局组件 Vue.component(&#39;login&#39;,{ template:&#39;&lt;div&gt;&lt;h1&gt;用户登录&lt;/h1&gt;&lt;/div&gt;&#39; }); //2.使用全局组件 在Vue实例范围内 &lt;login&gt;&lt;/login&gt; # 注意: - 1.Vue.component用来开发全局组件 参数1: 组件的名称 参数2: 组件配置{} template:&#39;&#39;用来书写组件的html代码 template中必须有且只有一个root元素 - 2.使用时需要在Vue的作用范围内根据组件名使用全局组件 - 3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用 12.2.2 局部组件注册 说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加 第一种开发方式 //局部组件登录模板声明 let login ={ //具体局部组件名称 template:&#39;&lt;div&gt;&lt;h2&gt;用户登录&lt;/h2&gt;&lt;/div&gt;&#39; }; const app = new Vue({ el: &quot;#app&quot;, data: {}, methods: {}, components:{ //用来注册局部组件 login:login //注册局部组件 } }); //局部组件使用 在Vue实例范围内 &lt;login&gt;&lt;/login&gt; 第二种开发方式 //1.声明局部组件模板 template 标签 注意:在Vue实例作用范围外声明 &lt;template id=&quot;loginTemplate&quot;&gt; &lt;h1&gt;用户登录&lt;/h1&gt; &lt;/template&gt; //2.定义变量用来保存模板配置对象 let login ={ //具体局部组件名称 template:&#39;#loginTemplate&#39; //使用自定义template标签选择器即可 }; //3.注册组件 const app = new Vue({ el: &quot;#app&quot;, data: {}, methods: {}, components:{ //用来注册局部组件 login:login //注册局部组件 } }); //4.局部组件使用 在Vue实例范围内 &lt;login&gt;&lt;/login&gt; 12.3 Prop的使用作用:props用来给组件传递相应静态数据或者是动态数据的 12.3.1 通过在组件上声明静态数据传递给组件内部//1.声明组件模板配置对象 let login = { template:&quot;&lt;div&gt;&lt;h1&gt;欢迎:{{ userName }} 年龄:{{ age }}&lt;/h1&gt;&lt;/div&gt;&quot;, props:[&#39;userName&#39;,&#39;age&#39;] //props作用 用来接收使用组件时通过组件标签传递的数据 } //2.注册组件 const app = new Vue({ el: &quot;#app&quot;, data: {}, methods: {}, components:{ login //组件注册 } }); //3.通过组件完成数据传递 &lt;login user-name=&quot;小陈&quot; age=&quot;23&quot;&gt;&lt;/login&gt; # 总结: 1.使用组件时可以在组件上定义多个属性以及对应数据 2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过{{ 属性名 }} 方式获取组件中属性值 12.3.2 通过在组件上声明动态数据传递给组件内部//1.声明组件模板对象 const login = { template:&#39;&lt;div&gt;&lt;h2&gt;欢迎: {{ name }} 年龄:{{ age }}&lt;/h2&gt;&lt;/div&gt;&#39;, props:[&#39;name&#39;,&#39;age&#39;] } //2.注册局部组件 const app = new Vue({ el: &quot;#app&quot;, data: { username:&quot;小陈陈&quot;, age:23 }, methods: {}, components:{ login //注册组件 } }); //3.使用组件 &lt;login :name=&quot;username&quot; :age=&quot;age&quot;&gt;&lt;/login&gt; //使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化 12.3.3 prop的单向数据流 单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。 所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。 额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。—摘自官网 12.4 组件中定义数据和事件使用1. 组件中定义属于组件的数据//组件声明的配置对象 const login = { template:&#39;&lt;div&gt;&lt;h1&gt;{{ msg }} 百知教育&lt;/h1&gt;&lt;ul&gt;&lt;li v-for=&quot;item,index in lists&quot;&gt;{{ index }}{{ item }}&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&#39;, data(){ //使用data函数方式定义组件的数据 在templatehtml代码中通过插值表达式直接获取 return { msg:&quot;hello&quot;, lists:[&#39;java&#39;,&#39;spring&#39;,&#39;springboot&#39;] }//组件自己内部数据 } } 2.组件中事件定义 const login={ template:&#39;&lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我触发组件中事件&quot; @click=&quot;change&quot;&gt;&lt;/div&gt;&#39;, data(){ return { name:&#39;小陈&#39; }; }, methods:{ change(){ alert(this.name) alert(&#39;触发事件&#39;); } } } # 总结 1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可 2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例 12.5 向子组件中传递事件并在子组件中调用该事件在子组件中调用传递过来的相关事件必须使用 this.$emit(&#39;函数名&#39;) 方式调用 //1.声明组件 const login = { template:&quot;&lt;div&gt;&lt;h1&gt;百知教育 {{ uname }}&lt;/h1&gt; &lt;input type=&#39;button&#39; value=&#39;点我&#39; @click=&#39;change&#39;&gt;&lt;/div&gt;&quot;, data(){ return { uname:this.name } }, props:[&#39;name&#39;], methods:{ change(){ //调用vue实例中函数 this.$emit(&#39;aaa&#39;); //调用组件传递过来的其他函数时需要使用 this.$emit(&#39;函数名调用&#39;) } } } //2.注册组件 const app = new Vue({ el: &quot;#app&quot;, data: { username:&quot;小陈&quot; }, methods: { findAll(){ //一个事件函数 将这个函数传递给子组件 alert(&#39;Vue 实例中定义函数&#39;); } }, components:{ login,//组件的注册 } }); //3.使用组件 &lt;login @find=&quot;findAll&quot;&gt;&lt;/login&gt; //=====&gt; 在组件内部使用 this.$emit(&#39;find&#39;) 13.Vue中路由 (Vue Router)13.1 路由路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理 13.2 作用 用来在vue中实现组件之间的动态切换 13.3 使用路由 引入路由&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt; //vue 路由js 创建组件对象//声明组件模板 const login = { template:&#39;&lt;h1&gt;登录&lt;/h1&gt;&#39; }; const register = { template:&#39;&lt;h1&gt;注册&lt;/h1&gt;&#39; }; 定义路由对象的规则 //创建路由对象 const router = new VueRouter({ routes:[ {path:&#39;/login&#39;,component:login}, //path: 路由的路径 component:路径对应的组件 {path:&#39;/register&#39;,component:register} ] }); 将路由对象注册到vue实例const app = new Vue({ el: &quot;#app&quot;, data: { username:&quot;小陈&quot;, }, methods: {}, router:router //设置路由对象 }); 在页面中显示路由的组件&lt;!--显示路由的组件--&gt; &lt;router-view&gt;&lt;/router-view&gt; 根据连接切换路由&lt;a href=&quot;#/login&quot;&gt;点我登录&lt;/a&gt; &lt;a href=&quot;#/register&quot;&gt;点我注册&lt;/a&gt; 13.4 router-link使用作用:用来替换我们在切换路由时使用a标签切换路由 好处:就是可以自动给路由路径加入#不需要手动加入 &lt;router-link to=&quot;/login&quot; tag=&quot;button&quot;&gt;我要登录&lt;/router-link&gt; &lt;router-link to=&quot;/register&quot; tag=&quot;button&quot;&gt;点我注册&lt;/router-link&gt; # 总结: 1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径 2.router-link to属性用来书写路由路径 tag属性:用来将router-link渲染成指定的标签 13.5 默认路由作用:用来在第一次进入界面是显示一个默认的组件 const router = new VueRouter({ routes:[ //{ path:&#39;/&#39;,component:login}, { path:&#39;/&#39;,redirect:&#39;/login&#39;}, //redirect: 用来当访问的是默认路由 &quot;/&quot; 时 跳转到指定的路由展示 推荐使用 { path:&#39;/login&#39;, component:login}, { path:&#39;/register&#39;, component:register}, ] }); 13.6 路由中参数传递 第一种方式传递参数 传统方式 通过?号形式拼接参数 &lt;router-link to=&quot;/login?id=21&amp;name=zhangsan&quot;&gt;我要登录&lt;/router-link&gt; 组件中获取参数 const login = { template:&#39;&lt;h1&gt;用户登录&lt;/h1&gt;&#39;, data(){return {}}, methods:{}, created(){ console.log(&quot;=============&gt;&quot;+this.$route.query.id+&quot;======&gt;&quot;+this.$route.query.name); } }; 第二种方式传递参数 restful 通过使用路径方式传递参数 &lt;router-link to=&quot;/register/24/张三&quot;&gt;我要注册&lt;/router-link&gt; var router = new VueRouter({ routes:[ {path:&#39;/register/:id/:name&#39;,component:register} //定义路径中获取对应参数 ] }); 组件中获取参数 const register = { template:&#39;&lt;h1&gt;用户注册{{ $route.params.name }}&lt;/h1&gt;&#39;, created(){ console.log(&quot;注册组件中id: &quot;+this.$route.params.id+this.$route.params.name); } }; 13.7 嵌套路由 声明最外层和内层路由&lt;template id=&quot;product&quot;&gt; &lt;div&gt; &lt;h1&gt;商品管理&lt;/h1&gt; &lt;router-link to=&quot;/product/add&quot;&gt;商品添加&lt;/router-link&gt; &lt;router-link to=&quot;/product/edit&quot;&gt;商品编辑&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/template&gt; //声明组件模板 const product={ template:&#39;#product&#39; }; const add = { template:&#39;&lt;h4&gt;商品添加&lt;/h4&gt;&#39; }; const edit = { template:&#39;&lt;h4&gt;商品编辑&lt;/h4&gt;&#39; }; 创建路由对象含有嵌套路由const router = new VueRouter({ routes:[ { path:&#39;/product&#39;, component:product, children:[ {path:&#39;add&#39;,component: add}, {path:&#39;edit&#39;,component: edit}, ] }, ] }); 注册路由对象const app = new Vue({ el: &quot;#app&quot;, data: {}, methods: {}, router,//定义路由对象 }); 测试路由 &lt;router-link to=&quot;/product&quot;&gt;商品管理&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; 14. Vue CLI 脚手架14.1 什么是CLI命令行界面（英语：command-line interface，缩写：CLI）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI） 14.2 什么是Vue CLI &lt;====&gt; (maven 项目构建工具)Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。 使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。 前端系统 14.3 Vue CLI优势 通过 vue-cli 搭建交互式的项目脚手架。 通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发 一个运行时依赖 (@vue/cli-service)，该依赖： 可升级; 基于 webpack 构建，并带有合理的默认配置； webpack 前端打包工具 index.html vue组件 用户组件 学生组件 ….. 路由 dist目录 可以通过项目内的配置文件进行配置； cli 项目配置文件 添加 可以通过插件进行扩展。 cli 项目里 一个丰富的官方插件集合，集成了前端生态中最好的工具。 webpack打包工具===&gt;dist目录 nodejs 服务器(tomcat java) 热部署插件 npm包 一套完全图形化的创建和管理 Vue.js 项目的用户界面 14.4 Vue CLI安装1. 环境准备# 1.下载nodejs http://nodejs.cn/download/ windows系统: .msi 安装包(exe)指定安装位置 .zip(压缩包)直接解压缩指定目录 mac os 系统: .pkg 安装包格式自动配置环境变量 .tar.gz(压缩包)解压缩安装到指定名 # 2.配置nodejs环境变量 1.windows系统: 计算上右键属性----&gt; 高级属性 ----&gt;环境变量 添加如下配置: NODE_HOME= nodejs安装目录 PATH = xxxx;%NODE_HOME% 2.macos 系统 推荐使用.pkg安装直接配置node环境 # 3.验证nodejs环境是否成功 node -v # 4.npm介绍 node package mangager nodejs包管理工具 前端主流技术 npm 进行统一管理 maven 管理java后端依赖 远程仓库(中心仓库) 阿里云镜像 npm 管理前端系统依赖 远程仓库(中心仓库) 配置淘宝镜像 # 5.配置淘宝镜像 npm config set registry https://registry.npm.taobao.org npm config get registry # 6.配置npm下载依赖位置 windows: npm config set cache &quot;D:\\nodereps\\npm-cache&quot; npm config set prefix &quot;D:\\nodereps\\npm_global&quot; mac os: npm config set cache &quot;/Users/chenyannan/dev/nodereps&quot; npm config set prefix &quot;/Users/chenyannan/dev/nodereps&quot; # 7.验证nodejs环境配置 npm config ls ; userconfig /Users/chenyannan/.npmrc cache = &quot;/Users/chenyannan/dev/nodereps&quot; prefix = &quot;/Users/chenyannan/dev/nodereps&quot; registry = &quot;https://registry.npm.taobao.org/&quot; 2.安装脚手架# 0.卸载脚手架 npm uninstall -g @vue/cli //卸载3.x版本脚手架 npm uninstall -g vue-cli //卸载2.x版本脚手架 # 1.Vue Cli官方网站 https://cli.vuejs.org/zh/guide/ # 2.安装vue Cli npm install -g vue-cli 3.第一个vue脚手架项目# 1.创建vue脚手架第一个项目 vue init webpack 项目名 # 2.创建第一个项目 hello -------------&gt;项目名 -build -------------&gt;用来使用webpack打包使用build依赖 构建一些依赖文件 -config -------------&gt;用来做整个项目配置目录 主要用来对 开发 测试 环境进行配置 -node_modules ------&gt;用来管理项目中使用依赖 -src ------&gt;用来书写vue的源代码[重点] +assets ------&gt;用来存放静态资源 [重点] components ------&gt;用来书写Vue组件 [重点] router ------&gt;用来配置项目中路由[重点] App.vue ------&gt;项目中根组件[重点] main.js ------&gt;项目中主入口[重点] -static ------&gt;其它静态 -.babelrc ------&gt; 将es6语法转为es5运行 -.editorconfig ------&gt; 项目编辑配置 -.gitignore ------&gt; git版本控制忽略文件 -.postcssrc.js ------&gt; 源码相关js -index.html ------&gt; 项目主页 -package.json ------&gt; 类似与pom.xml 依赖管理 jquery 不建议手动修改 -package-lock.json ----&gt; 对package.json加锁 -README.md ----&gt; 项目说明文件 # 3.如何运行在项目的根目录中执行 npm start 运行前端系统 # 4.如何访问项目 http://localhost:8081 # 5.Vue Cli中项目开发方式 注意: 一切皆组件 一个组件中 js代码 html代码 css样式 1. VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统 2. 日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件 4.如何开发Vue脚手架注意:在Vue cli 中一切皆组件 15.在脚手架中使用axios15.1 安装axios# 1.安装axios npm install axios --save # 2.配置main.js中引入axios import axios from &#39;axios&#39;; Vue.prototype.$http=axios; # 3.使用axios 在需要发送异步请求的位置:this.$http.get(&quot;url&quot;).then((res)=&gt;{}) this.$http.post(&quot;url&quot;).then((res)=&gt;{}) 16.Vue Cli脚手架项目部署# 1.在项目根目录中执行如下命令: vue run build 注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行 # 2.打包之后当前项目中变化 在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录 17.VueX 状态管理17.1 简介&amp;安装# 1.简介 - Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态， 并以相应的规则保证状态以一种可预测的方式发生变化 -之前可以通过：v-bind绑定属性给子组件传参，@绑定函数给父组件传参 但是兄弟组件之前无法实现 只能用vuex # 2.安装vuex - npm install vuex --save # 3.创建vue cli中创建store文件夹 # 4.在stroe中创建index.js文件 import Vue from &#39;vue&#39; import Vuex from &#39;vuex&#39; //1.安装vuex Vue.use(Vuex); //2.创建store对象 const store = new Vuex.Store({ }); //3.暴露store对象 export default store; # 5.在main.js中引入stroe并注册到vue实例 import Vue from &#39;vue&#39; import App from &#39;./App&#39; import router from &#39;./router&#39; import store from &quot;./stroe&quot;;//引入store Vue.config.productionTip = false /* eslint-disable no-new */ new Vue({ el: &#39;#app&#39;, router, components: { App }, template: &#39;&lt;App/&gt;&#39;, store,//注册状态 }) 17.2 state属性# 1.state属性 - 作用: 用来全局定义一些共享的数据状态 # 2.语法 const store = new Vuex.Store({ state:{ counter:0,//定义共享状态 }, } # 3.使用 {{$store.state.counter}} ===&gt; {{this.$store.state.counter}} 17.3 mutations 属性# 1.mutations 属性 - 作用: 用来定义对共享的数据修改的一系列函数 # 2.语法 const store = new Vuex.Store({ state:{ counter:0,//定义共享状态 }, mutations:{ //增加 increment(state){ state.counter++ }, //减小 decrement(state){ state.counter-- } } }); # 3.使用 this.$store.commit(&#39;decrement&#39;); this.$store.commit(&#39;increment&#39;); # 4.mutations传递参数 - a.定义带有参数的函数 mutations:{ //addCount 参数1:state 对象 参数2:自定义参数 addCount(state,counter){ console.log(counter); return state.counter += counter ; } } - b.调用时传递参数 this.$store.commit(&#39;addCount&#39;,11); 17.4 getters 属性# 1.getters 属性 - 官方: 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据 它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。 - 作用: 用来定义对共享的数据的计算相关的一系列函数 相当于 computed 属性 会对结果进行缓存 # 2.语法 getters:{ //平方 mathSqrts(state){ console.log(&quot;--------&quot;); return state.counter*state.counter; }, //乘以一个数字 mathSqrtsNumber(state,getters){ return getters.mathSqrts*3; }, //传递参数 mathSqrtsNumbers(state,getters){ return function (number){ return number; } } } # 3.使用 - 1.{{$store.getters.mathSqrts}} - 2.{{$store.getters.mathSqrtsNumber}} - 3.{{$store.getters.mathSqrtsNumbers(3)}}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"编程","slug":"编程","permalink":"/tags/编程/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"我与树的对话","slug":"我和树的谈话","date":"2019-12-12T14:16:01.000Z","updated":"2021-05-26T15:12:11.396Z","comments":true,"path":"2019/12/12/我和树的谈话/","link":"","permalink":"/2019/12/12/我和树的谈话/","excerpt":"#第一篇博客","text":"#第一篇博客我:喂，你说你为什么要活着啊，活着有什么意思，这么累。你可别跟我说为了给人类留下一片绿茵，我可受不了这种大道理。 树:我不知道，但是有个信念一直在我的身体里，那就是我的生命不是自己的，而是从先辈传下来，从我是一个种子开始，我就注定要完成传宗接代的任务，就和先辈一样，这或许是我活这么久的原因吧？ 我:即便被大雪夺取自己的手臂，被大雨击打自己的皮肤，被狂风吹裂自己的面容吗？ 树:是的，夺取的手臂，春天还会长回来，被狂风骤雨击打皮肤也是一种历练，让我更加强壮，我的根会扎入很深的土地。我们树的一生其实很卑微，平日里只能做这蓝天白云的背景，还要靠人类才能发现自己原来还有光合作用此等作用。 我:背景？我还以为只有人类才用这个词。究竟是世界是因为树变得美丽，还是说树因为在这美丽的世界里而变得美丽？想不懂。不过挺伟大的不是吗？每天给这么多动物提供氧气，净化空气。 树:可能吧，但是这也是我活下去的资本啊，这样说就变得自私了，这个世界上有70亿棵树，我只是最普普通通的树，没有故事，没有名字，哪怕今天我死了，也没人为我哀悼，因为人类很快又会培植一棵新的树。 我:没想到做一棵树也不容易嘛？ 树:所以说嘛，做人多好，有自己的爱好，能爱上一个人，还有这么多美好的人和经历。对了，你的爱好是什么？ 我:额，我不太敢说 树:你应该喜欢看书吧，看你这个样子就不是什么积极向上，正能量爆棚的男生，倒不如说跟深山的一颗树一样，阴森森的，捉摸不透。 我:哈哈哈，你还真的了解我，我之所以不说，因为觉得这对你不尊重。 树:这没什么，人类可以把控我们的生命，相比其他纸制品，书还是最好的了，我觉得书是人类最伟大的发明。要我选，我肯定选做人，度过小说一般的人生。 我:那我选择做一棵树，表面活泼，沐浴阳光，在享受阳光的滋润的同时不骄傲，把自己的根深深扎进黑暗的土地里。","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"生活","slug":"生活","permalink":"/tags/生活/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"安徽广电虚拟智能系统（优秀建模奖、省二等奖）","slug":"安徽广电模型","date":"2019-09-12T14:16:01.000Z","updated":"2021-05-26T14:48:20.098Z","comments":true,"path":"2019/09/12/安徽广电模型/","link":"","permalink":"/2019/09/12/安徽广电模型/","excerpt":"","text":"这个是抱队友大腿获得的省赛二等奖 和 国赛优秀建模奖，自己负责的不太多，不过这是我第一次获得科技竞赛的奖，比后来的获得国赛还开心，哈哈哈ヽ(ﾟ▽ﾟ)ノ","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"作品","slug":"作品","permalink":"/tags/作品/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"《苹果酒屋的规则》","slug":"苹果酒屋的规则","date":"2019-01-15T14:16:01.000Z","updated":"2021-05-26T15:07:38.697Z","comments":true,"path":"2019/01/15/苹果酒屋的规则/","link":"","permalink":"/2019/01/15/苹果酒屋的规则/","excerpt":"","text":"爱永迎是义学作品中经常被讨论的问题。拉奇医主对荷马的爱稳重，伟大，作看毫无疑问地把父亲对儿子的爱生动表达出来，很针织。在表达爱的时候，拉奇也的反思，是不是自己对于荷马的爱完全出于自己的考虑，私心。人是有缺点的而欧文恰恰抓住了这点，这使拉奇无私，伟大的形象真实地表达出来。回顾全书，爱就是主线。前期拉奇的爱，荷马与美洛妮的爱，中期观海果园华辛顿一家、坎蒂、雷与荷马之间的爱。 最大的感悟还是在前期，拉奇的费尽心力地爱荷马，让我理解到做父亲的感爱，他教给你一切，为一规划好人生，但也在心里责备自己是不是毁了你的未来，他爱的如此小心翼翼，如此细腻“当父亲的滋味真是难以言表！像父母一般疼受某个孩子、可能会使自己受蒙蔽，以至于无法明辨是非。人生的亮点还在于你的悔恨反思，如拉奇医生未给那位女士堕胎。 再来说说这个题目“苹果酒屋的规则”一是与后期对照上，结尾时呼应。“规则”存在于任何角落。正如卡罗琳护士对拉齐所说即使一个好人也不可能永远正确,我们才需要社会,才需要制造某些规则”，孤儿院的规则是由拉奇制定的，而有规则制约着他。太复杂了，难通爱也有规则吗？就像荷马与坎蒂选择不伤害华力而隐瞒真相。 人需要用规到来约束自己不做大逆不道之事，保持善良，同时也要学会跳出自己的条条框框。荷马与坎蒂是苹果酒屋规则制定者，也同样是破坏者。罗斯先生的女儿破坏规则，罗斯也破坏了自己的规则伤害了女儿。总而言之，人还是需要规纠的来缚。文中许许多多讽利、调侃现实社会的事，为来这书增添很多趣味性。欧文,你真的不是职业作家而且摔跤手吗？","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"},{"name":"书评","slug":"书评","permalink":"/tags/书评/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2021-05-26T14:50:37.355Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"《局外人》","slug":"局外人","date":"2018-03-26T14:16:01.000Z","updated":"2021-05-26T15:11:33.227Z","comments":true,"path":"2018/03/26/局外人/","link":"","permalink":"/2018/03/26/局外人/","excerpt":"","text":"第一感觉是很压抑，在整个故事叔述中,主人公似乎是世界隔离开的局外人，所有的场景都像是空架一般。每个人都独一无二，有其独特的人格，主人公诚实善良，不明世故，但却被妖鬼化，而且是通过一些无关紧要的事情来判断。我一直都不会质疑是司法机刺、而今，彻底改变了我的看法。书里的司法机制并不完善，甚至还有点不合人理。一个完全对社会没有伤害的人、却因其它事情来断定他就是一个可耻，没有人性的人，然而事实并非如此，夸大地断定，否定了主人默尔索的一切,包括他的人性，对他的精神职肆意地催残。是谁给审判官如此大的权力。而世人的眼光更是受到审判官的左右。一个老实人的因过失杀人而被无情地摧残，从精神上！何等地残忍。就连反驳都是他人左右，把他置之事外““一个普通人的优点，到了罪犯身上就成了他十恶不软的罪状”这本书真的精彩,从通过罪心理引审判等都细致入微,看完之后，耐人寻味，更改笑了我对神学，司法机制的一些看法。我更加里信、一件事情具有的复杂性,绝不能从一个观点来简而概之,人还是要保持理智、清醒的头脑,不要被他人的观点左右，要综合，要有自己的见解。短小精悍的小说！","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"},{"name":"书评","slug":"书评","permalink":"/tags/书评/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"《活着》","slug":"活着","date":"2017-10-19T10:16:01.000Z","updated":"2021-05-26T15:07:26.611Z","comments":true,"path":"2017/10/19/活着/","link":"","permalink":"/2017/10/19/活着/","excerpt":"","text":"故事中的福贵的一生深深地吸引了我，从年少的浪荡,再到家迫中落、以及后来起浮的希望与绝望。我想作者看做到了他说的为内心而写作。故事放在今天可以说是十分的悲惨,而在作者笔下,我却能在那些悲伤中感到平静和温情。人生经历真的是丰富而又复杂的、事事难料，如福贵和老全所说：只要想着自己不死，就死不了。而人想死，谁也阻止不了，如同春生的死。尽管福贵一生起起浮浮。但也不算失败，因为他 还活着！在面对了这么多大灾大难，到最后却像伙风中摇典的草一样、平淡，朴实，安静。我想他教会了我如何去承受巨大的苦难、为本身而活、而不是为了活着意外的任何事物而活。任何东西都有离开的一天。从今天开始、请为自己精彩地活着。文中福贵的妻子家珍对丈夫的忠贞，子女对富贵的孝顺，也彻府打动了我，感受到困难中的温情与人心的善良、春生和二喜的插入,也为文章平添不少戏剧性。","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"},{"name":"书评","slug":"书评","permalink":"/tags/书评/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]}]}